
import React from 'react'

// ----------------------------------
/*
export const InputComponent = () => {
    return (
        <div>
            <label htmlFor="check">Click Here To Check</label>
            <input type="checkbox" name="" id="check" />
        </div>
    )

}
*/
// ----------------------------------

import { useId } from 'react';

/*
export const InputComponent = () => {
    const id = useId();

    return (
        <div>
            <label htmlFor={id}>Click Here To Check</label>
            <input type="checkbox" name="" id={id} />
        </div>
    )
}
*/
// ----------------------------------

/*
export const InputComponent = () => {
    const id = useId();
    console.log('id:', id)

    return (
        <div>
            <div>
                <label htmlFor={id}>Click Here To Check</label>
                <input type="checkbox" name="" id={id} />
            </div>
            <div>
                <label htmlFor={id}>Click Here To Check</label>
                <input type="checkbox" name="" id={id} />
            </div>
            <hr />
        </div>
    )
}

Now there are two div with label and checkbox input.
Whenever component will get mount the unique id generate and that unique id will be used by label and input of both div means same unique id will be used by all whenever component mount.

Due to this if we click on second checkbox label then it target the first checkbox all time.
means here we are using InputComponent four times in App.jsx component and each InputComponent will be having two checkbox label with their respective checkbox input with same unique id that was generated by useId hook.
because of this whenever we click on any checkbox label it will always target first checkbox.

To resolve this we have two option either we can use multiple useId to generate number of unique Id depending on need.
Or we can use shared prefix wherever we want unqiue id by doing this we just need to use one time useId hook to generate unique id
*/
// -----------------------------------------

/*
export const InputComponent = () => {
    const id1 = useId();
    const id2 = useId();
    const id3 = useId();
    const id4 = useId();
    const id5 = useId();

    return (
        <div>
            <div>
                <label htmlFor={id1}>Click Here To Check id : {id1}</label>
                <input type="checkbox" name="" id={id1} />
            </div>
            <div>
                <label htmlFor={id2}>Click Here To Check id : {id2}</label>
                <input type="checkbox" name="" id={id2} />
            </div>
            <div>
                <label htmlFor={id3}>Click Here To Check id : {id3}</label>
                <input type="checkbox" name="" id={id3} />
            </div>
            <div>
                <label htmlFor={id4}>Click Here To Check id : {id4}</label>
                <input type="checkbox" name="" id={id4} />
            </div>
            <div>
                <label htmlFor={id5}>Click Here To Check id : {id5}</label>
                <input type="checkbox" name="" id={id5} />
            </div>
            <hr />
        </div>
    )
}

Here the problem is that we have wrote useId multiple times depending on need and this will be not a good approach.
We can resolve this by using shared prefix wherever we need unique Id
*/
// -----------------------------------------

export const InputComponent = () => {
    const id = useId();

    return (
        <div>
            <div>
                <label htmlFor={"prefix1"+id}>Click Here To Check id : {"prefix1"+id}</label>
                <input type="checkbox" name="" id={"prefix1"+id} />
            </div>
            <div>
                <label htmlFor={"prefix2"+id}>Click Here To Check id : {"prefix2"+id}</label>
                <input type="checkbox" name="" id={"prefix2"+id} />
            </div>
            <div>
                <label htmlFor={"prefix3"+id}>Click Here To Check id : {"prefix3"+id}</label>
                <input type="checkbox" name="" id={"prefix3"+id} />
            </div>
            <div>
                <label htmlFor={"prefix4"+id}>Click Here To Check id : {"prefix4"+id}</label>
                <input type="checkbox" name="" id={"prefix4"+id} />
            </div>
            <div>
                <label htmlFor={"prefix5"+id}>Click Here To Check id : {"prefix5"+id}</label>
                <input type="checkbox" name="" id={"prefix5"+id} />
            </div>
            <hr />
        </div>
    )
}